{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let RegComponent = class RegComponent {\n  constructor(http, router, toastr, authService) {\n    this.http = http;\n    this.router = router;\n    this.toastr = toastr;\n    this.authService = authService;\n    this.newUser = {\n      name: '',\n      email: '',\n      password: ''\n    };\n  }\n  registerUser() {\n    this.http.post('http://localhost:3000/account/register', this.newUser).subscribe({\n      next: response => {\n        this.toastr.success(response.message, 'Успешная регистрация');\n        this.router.navigate(['/']);\n      },\n      error: error => {\n        if (error && error.error && error.error.message) {\n          this.toastr.error(error.error.message, 'Ошибка при регистрации');\n        } else {\n          this.toastr.error('Что-то пошло не так', 'Ошибка при регистрации');\n        }\n        console.error('Ошибка при регистрации:', error);\n      }\n    });\n    this.authService.clearUserData(); // Примерный метод, который следует создать в AuthService\n    // Теперь обновите поля ввода на пустые значения\n    this.user.name = '';\n    this.user.email = '';\n    this.user.password = '';\n  }\n};\nRegComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './reg.component.html',\n  styleUrls: ['./reg.component.css']\n})], RegComponent);","map":{"version":3,"names":["Component","RegComponent","constructor","http","router","toastr","authService","newUser","name","email","password","registerUser","post","subscribe","next","response","success","message","navigate","error","console","clearUserData","user","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\daris\\Documents\\mean-api\\front-end\\src\\app\\reg\\reg.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './reg.component.html',\n  styleUrls: ['./reg.component.css']\n})\nexport class RegComponent {\n  newUser = {\n    name: '',\n    email: '',\n    password: ''\n  };\n\n  constructor(private http: HttpClient, private router: Router, private toastr: ToastrService, private authService: AuthService) {}\n\n  registerUser() {\n    this.http.post<any>('http://localhost:3000/account/register', this.newUser)\n      .subscribe({\n        next: (response) => {\n          this.toastr.success(response.message, 'Успешная регистрация');\n          this.router.navigate(['/']);\n        },\n        error: (error) => {\n          if (error && error.error && error.error.message) {\n            this.toastr.error(error.error.message, 'Ошибка при регистрации');\n          } else {\n            this.toastr.error('Что-то пошло не так', 'Ошибка при регистрации');\n          }\n          console.error('Ошибка при регистрации:', error);\n        }\n      });\n    this.authService.clearUserData(); // Примерный метод, который следует создать в AuthService\n\n    // Теперь обновите поля ввода на пустые значения\n    this.user.name = '';\n    this.user.email = '';\n    this.user.password = '';\n  }\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAOvBC,YAAoBC,IAAgB,EAAUC,MAAc,EAAUC,MAAqB,EAAUC,WAAwB;IAAzG,KAAAH,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,MAAM,GAANA,MAAM;IAAyB,KAAAC,WAAW,GAAXA,WAAW;IANhH,KAAAC,OAAO,GAAG;MACRC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX;EAE+H;EAEhIC,YAAYA,CAAA;IACV,IAAI,CAACR,IAAI,CAACS,IAAI,CAAM,wCAAwC,EAAE,IAAI,CAACL,OAAO,CAAC,CACxEM,SAAS,CAAC;MACTC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACV,MAAM,CAACW,OAAO,CAACD,QAAQ,CAACE,OAAO,EAAE,sBAAsB,CAAC;QAC7D,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC7B,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf,IAAIA,KAAK,IAAIA,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACF,OAAO,EAAE;UAC/C,IAAI,CAACZ,MAAM,CAACc,KAAK,CAACA,KAAK,CAACA,KAAK,CAACF,OAAO,EAAE,wBAAwB,CAAC;SACjE,MAAM;UACL,IAAI,CAACZ,MAAM,CAACc,KAAK,CAAC,qBAAqB,EAAE,wBAAwB,CAAC;;QAEpEC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;KACD,CAAC;IACJ,IAAI,CAACb,WAAW,CAACe,aAAa,EAAE,CAAC,CAAC;IAElC;IACA,IAAI,CAACC,IAAI,CAACd,IAAI,GAAG,EAAE;IACnB,IAAI,CAACc,IAAI,CAACb,KAAK,GAAG,EAAE;IACpB,IAAI,CAACa,IAAI,CAACZ,QAAQ,GAAG,EAAE;EACzB;CAGD;AAlCYT,YAAY,GAAAsB,UAAA,EALxBvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACWzB,YAAY,CAkCxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}