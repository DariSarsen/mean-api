{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AddTaskService {\n  constructor(http) {\n    this.http = http;\n  }\n  addTask(task) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post('http://localhost:3000/task/addtask', task, {\n      headers: headers\n    });\n  }\n}\n_class = AddTaskService;\n_class.ɵfac = function AddTaskService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","AddTaskService","constructor","http","addTask","task","headers","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\daris\\Documents\\,,,\\Projects\\mean-api\\front-end\\src\\app\\add-task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddTaskService {\n\n  constructor(private http: HttpClient) { }\n\n  addTask(task: any): Observable<any> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    return this.http.post<any>('http://localhost:3000/task/addtask', task, { headers: headers });\n  }\n}\n "],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,OAAOA,CAACC,IAAS;IACf,MAAMC,OAAO,GAAG,IAAIN,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACG,IAAI,CAACI,IAAI,CAAM,oCAAoC,EAAEF,IAAI,EAAE;MAAEC,OAAO,EAAEA;IAAO,CAAE,CAAC;EAC9F;;SARWL,cAAc;;mBAAdA,MAAc,EAAAO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAdV,MAAc;EAAAW,OAAA,EAAdX,MAAc,CAAAY,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}