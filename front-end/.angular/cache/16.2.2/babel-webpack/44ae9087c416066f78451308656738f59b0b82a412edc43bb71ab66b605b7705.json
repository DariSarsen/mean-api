{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../book.service\";\nimport * as i4 from \"ngx-toastr\";\nimport * as i5 from \"@angular/forms\";\nexport class EditBookComponent {\n  constructor(route, http, bookService, toastr) {\n    this.route = route;\n    this.http = http;\n    this.bookService = bookService;\n    this.toastr = toastr;\n    this.bookId = null; // Используем тип string | null\n    this.updatedBook = {\n      title: '',\n      author: '',\n      description: ''\n    };\n  }\n  ngOnInit() {\n    this.bookId = this.route.snapshot.paramMap.get('id');\n    if (this.bookId) {\n      // Получение информации о книге для редактирования\n      this.http.get(`http://localhost:3000/books/${this.bookId}`).subscribe(book => {\n        this.updatedBook = book;\n      });\n    }\n  }\n  updateBook() {\n    if (this.bookId) {\n      this.http.put(`http://localhost:3000/books/${this.bookId}`, this.updatedBook).subscribe({\n        next: () => {\n          this.toastr.success('Информация о книге успешно обновлена', 'Успешно');\n          // Действия после успешного обновления книги, например, перезагрузка списка книг\n          // Если нужно, можно добавить перезагрузку списка книг через вызов метода getBookDetails() снова\n        },\n\n        error: () => {\n          this.toastr.error('Ошибка при обновлении информации о книге', 'Ошибка');\n        }\n      });\n    }\n  }\n}\n_class = EditBookComponent;\n_class.ɵfac = function EditBookComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.BookService), i0.ɵɵdirectiveInject(i4.ToastrService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-edit-book\"]],\n  decls: 18,\n  vars: 3,\n  consts: [[1, \"container\", \"mt-4\"], [1, \"card\", \"shadow\", \"border-0\"], [1, \"card-body\"], [3, \"submit\"], [1, \"mb-3\"], [\"for\", \"updateTitle\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"updateTitle\", \"placeholder\", \"Title\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"updateAuthor\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"updateAuthor\", \"placeholder\", \"Author\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"updateDescription\", 1, \"form-label\"], [\"id\", \"updateDescription\", \"placeholder\", \"Description\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function EditBookComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"form\", 3);\n      i0.ɵɵlistener(\"submit\", function EditBookComponent_Template_form_submit_3_listener() {\n        return ctx.updateBook();\n      });\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"label\", 5);\n      i0.ɵɵtext(6, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function EditBookComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.updatedBook.title = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 4)(9, \"label\", 7);\n      i0.ɵɵtext(10, \"Author\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function EditBookComponent_Template_input_ngModelChange_11_listener($event) {\n        return ctx.updatedBook.author = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 4)(13, \"label\", 9);\n      i0.ɵɵtext(14, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"textarea\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function EditBookComponent_Template_textarea_ngModelChange_15_listener($event) {\n        return ctx.updatedBook.description = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"button\", 11);\n      i0.ɵɵtext(17, \"Update Book\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedBook.title);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedBook.author);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.updatedBook.description);\n    }\n  },\n  dependencies: [i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.NgModel, i5.NgForm],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["EditBookComponent","constructor","route","http","bookService","toastr","bookId","updatedBook","title","author","description","ngOnInit","snapshot","paramMap","get","subscribe","book","updateBook","put","next","success","error","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","HttpClient","i3","BookService","i4","ToastrService","selectors","decls","vars","consts","template","EditBookComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","EditBookComponent_Template_form_submit_3_listener","ɵɵtext","ɵɵelementEnd","EditBookComponent_Template_input_ngModelChange_7_listener","$event","EditBookComponent_Template_input_ngModelChange_11_listener","EditBookComponent_Template_textarea_ngModelChange_15_listener","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\daris\\Documents\\mean-api\\front-end\\src\\app\\edit-book\\edit-book.component.ts","C:\\Users\\daris\\Documents\\mean-api\\front-end\\src\\app\\edit-book\\edit-book.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { ToastrService } from 'ngx-toastr';\nimport { BookService } from '../book.service';\n\n@Component({\n  selector: 'app-edit-book',\n  templateUrl: './edit-book.component.html',\n  styleUrls: ['./edit-book.component.css']\n})\nexport class EditBookComponent implements OnInit {\n  bookId: string | null = null; // Используем тип string | null\n\n  updatedBook = {\n    title: '',\n    author: '',\n    description: ''\n  };\n\n  constructor(private route: ActivatedRoute, private http: HttpClient, private bookService: BookService, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.bookId = this.route.snapshot.paramMap.get('id');\n    if (this.bookId) {\n      // Получение информации о книге для редактирования\n      this.http.get<any>(`http://localhost:3000/books/${this.bookId}`)\n        .subscribe(book => {\n          this.updatedBook = book;\n        });\n    }\n  }\n\n  updateBook() {\n    if (this.bookId) {\n      this.http.put<any>(`http://localhost:3000/books/${this.bookId}`, this.updatedBook)\n        .subscribe({\n          next: () => {\n            this.toastr.success('Информация о книге успешно обновлена', 'Успешно');\n            // Действия после успешного обновления книги, например, перезагрузка списка книг\n            // Если нужно, можно добавить перезагрузку списка книг через вызов метода getBookDetails() снова\n          },\n          error: () => {\n            this.toastr.error('Ошибка при обновлении информации о книге', 'Ошибка');\n          }\n        });\n    }\n  }\n}\n","<div class=\"container mt-4\">\n  <div class=\"card shadow border-0\">\n    <div class=\"card-body\">\n      <form (submit)=\"updateBook()\">\n        <div class=\"mb-3\">\n          <label for=\"updateTitle\" class=\"form-label\">Title</label>\n          <input type=\"text\" class=\"form-control\" id=\"updateTitle\" placeholder=\"Title\" [(ngModel)]=\"updatedBook.title\">\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"updateAuthor\" class=\"form-label\">Author</label>\n          <input type=\"text\" class=\"form-control\" id=\"updateAuthor\" placeholder=\"Author\" [(ngModel)]=\"updatedBook.author\">\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"updateDescription\" class=\"form-label\">Description</label>\n          <textarea class=\"form-control\" id=\"updateDescription\" placeholder=\"Description\" [(ngModel)]=\"updatedBook.description\"></textarea>\n        </div>\n        <!-- Другие поля книги, если есть -->\n        <button type=\"submit\" class=\"btn btn-primary\">Update Book</button>\n      </form>\n    </div>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}